<!DOCTYPE html>
<html>
<head>
  <title>millicent</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #216477;
      }
      
      .background-container {
        position: absolute;
        left: 0;
        display: flex;
        justify-content: center;
        align-content: center;
        width: 100vw;
        z-index: -1;
      }

      .background-image {
        height: 100vh;
      }

      .logo-container {
        position: absolute;
        top: 0;
        right: 0;
        display: flex;
        align-items: end;
      }

      .container {
        max-width: calc(100vw / 2);
        padding: 20px;
      }
      
      h1 {
        text-align: center;
        margin-bottom: 20px;
      }
      .title {
      	text-align: left;
      	margin-bottom: 20px;
      	position: absolute;
      	left: 0;
      	margin: 50px;
      }
      
      .metadata-boxes {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        flex-direction: column;
        font-size: 1.5rem;
        padding: 0 150px;
      }
      
      .metadata-box {
        background-color: transparent;
        padding: 20px;
        border-radius: 5px;
        flex: 1;
        text-align: center;
        border: 2px solid grey;

      }
      
      .audio-wrapper {
        position: relative;
        padding: 20px;
        border-radius: 5px;
        z-index: -2;
      }
      
      #audio-player {
        width: 100%;
        display: none;
      }

      #audio-visualization {
          width: 100%;
      }

      .circle {
          position: fixed;
          bottom: -200px;
          right: -200px;
          width: 400px;
          height: 400px;
          /* background-color: #012442;  Circle color */
          border-radius: 50%;
          display: flex;
          justify-content: flex-start;
          align-items: flex-start;
          cursor: pointer;
          z-index: 1000; /* Ensure it's above other content */
      }

      .play-icon {
          font-size: 100px;
          color: rgb(172, 70, 0); /* Icon color */
          margin-left: 95px;
          margin-top: 60px;
      }

      .hidden {
          opacity: 0;
          transition: opacity 1.5s ease;
      }      
      /* Responsive Styles */
      @media screen and (max-width: 600px) {
        .metadata-boxes {
          flex-direction: column;
          align-items: center;
        }
      
        .metadata-box {
          width: 100%;
          margin-bottom: 10px;
        }
      
        .audio-wrapper {
          padding: 10px;
        }

      }
  </style>
</head>
<body>
  <div class="container">
    <div class="background-container">
      <img class="background-image" src = "static/imgs/millicent_background.png" />
    </div>
    <div class="audio-wrapper">
      <audio id="audio-player" controls></audio>
    </div>
    <div class="metadata-boxes">
      <div class="metadata-box" id="metadata-box-1">-</div>
      <div class="metadata-box" id="metadata-box-2">-</div>
      <div class="metadata-box" id="metadata-box-3">-</div>
    </div>
    <div class="circle">
      <div class="btn-container">
        <div class="play-icon" id="play-button" onclick="playNow()">▶</div>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
  <script>
    const audio = document.getElementById("audio-player");
    const playButton = document.getElementById("play-button");
    
    document.addEventListener("DOMContentLoaded", function () {
      // Initialize hls.js
      if (Hls.isSupported()) {
        const hls = new Hls();
        const metadataBoxes = document.getElementsByClassName("metadata-box");
        const metadataAndPTS = []; // Array to store received metadata and associated PTS
        let currentPTS = 0; // Store the current PTS from the stream
  
        // Load the HLS stream source
        hls.loadSource("https://d1i4sik9cp7a6c.cloudfront.net/hls/live.m3u8");
        hls.attachMedia(audio);
  
        // Event listener for "FRAG_PARSING_METADATA" in HLS.js
        hls.on(Hls.Events.FRAG_PARSING_METADATA, function (event, data) {
          const metadataText = new TextDecoder("utf-8").decode(data.samples[0].data);

          console.log("Event: " + metadataText.substring(21));
        
          // Extract JSON data (assuming a fixed 21-character header)
          const jsonStr = metadataText.substring(21);
        
          try {
            const parsedData = JSON.parse(jsonStr);
        
            // Store the received metadata and associated PTS in the array
            metadataAndPTS.push({ pts: data.samples[0].pts, metadata: parsedData });
          } catch (error) {
            console.error("Error parsing JSON from metadata:");
          }
        });
        
        // Event listener for "timeupdate" on the audio player
        audio.addEventListener("timeupdate", function () {
          const playerTimestamp = audio.currentTime * 1000; // Convert to milliseconds
        
          while (metadataAndPTS.length > 0 && metadataAndPTS[0].pts <= playerTimestamp) {
            const { pts, metadata } = metadataAndPTS.shift();
            updateMetadataBoxes(metadata);
          }
        });
  
        // Helper function to update the text boxes with metadata
        function updateMetadataBoxes(metadata) {
          // Define an array of keys to extract from the metadata
          const keys = ["music", "field", "vocal"];
          let td_text_array = [];
        
          // Loop through the keys and update the corresponding metadata boxes
          keys.forEach((key, index) => {
            const metadataValue = metadata[key];
            const title = metadataValue.title || 'N/A';
            const artist = metadataValue.artist || 'N/A';
            
            const box = metadataBoxes[index];

            
            // Update the text content of the box
            if (title !== 'silence' && artist !== 'silence') {
              box.innerHTML = `<div class="metadata-title">${title}</div><div class="metadata-artist">${artist}</div>`;
              box.classList.remove('hidden');
              td_text_array.push(title, artist);
            } else {
              box.classList.add('hidden');
            }
          });
          const td_text_string = "".join(td_text_array);
          console.log(td_text_string);
          console.log(`text array: ${td_text_array}`);
        }
      } else {
        console.error("HLS.js is not supported in this browser.");
      }

      
    });
    function playNow() {
      if (audio.paused) {
        audio.play();
        playButton.innerHTML = '❚❚';
        playButton.style.marginLeft = '75px';
        playButton.style.marginTop = '90px';
        playButton.style.fontSize = '55px';
      } else {
        audio.pause();
        playButton.innerHTML = '▶';
        playButton.style.marginLeft = '95px';
        playButton.style.fontSize = '100px';
        playButton.style.marginTop = '60px';
      }
    }
  </script>

</body>
</html>
